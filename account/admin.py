from django.contrib import adminfrom django.contrib.auth.admin import UserAdmin as BaseUserAdminfrom account.forms import UserAdminChangeForm, UserAdminCreationFormfrom account.models import EmailAccount, Vendorfrom commerce.admin import Userclass EmailAccountAdmin(BaseUserAdmin):    # The forms to add and change user instances    form = UserAdminChangeForm    add_form = UserAdminCreationForm    # The fields to be used in displaying the User model.    # These override the definitions on the base UserAdmin    # that reference specific fields on auth.User.    list_display = ('email', 'first_name', 'last_name', 'is_active', 'is_staff', 'is_superuser',)    list_filter = ('is_superuser', 'is_staff')    fieldsets = (        (None, {'fields': ('email', 'password')}),        ('Personal info', {'fields': (            'first_name', 'last_name', 'phone_number', 'address1', 'address2', 'company_name',            'company_website')}),        ('Permissions',         {'fields': ('is_active', 'is_superuser', 'is_staff', 'is_verified', 'groups', 'user_permissions',)}),        ('Important dates', {'fields': ('last_login', 'date_joined')}),    )    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin    # overrides get_fieldsets to use this attribute when creating a user.    add_fieldsets = (        (None, {            'classes': ('wide',),            'fields': ('email', 'password1', 'password2')}         ),    )    search_fields = ('first_name', 'last_name', 'email')    ordering = ('email',)    filter_horizontal = ()admin.site.register(EmailAccount, EmailAccountAdmin)@admin.register(Vendor)class VendorAdmin(admin.ModelAdmin):    list_display = ('name', 'image', 'slug')    search_fields = ('name', 'slug')    prepopulated_fields = {'slug': ['name']}    def get_readonly_fields(self, request, obj=None):        if obj and not request.user.is_superuser:            return ["user"]        else:            return []    def get_queryset(self, request):        qs = super().get_queryset(request)        if request.user.is_superuser:            return qs        return qs.filter(user_id=request.user.id)    def formfield_for_foreignkey(self, db_field, request, **kwargs):        if not request.user.is_superuser:            if db_field.name == "user":                kwargs["queryset"] = User.objects.filter(id=request.user.id).distinct()            return super().formfield_for_foreignkey(db_field, request, **kwargs)        return super().formfield_for_foreignkey(db_field, request, **kwargs)    def has_change_permission(self, request, obj=None):        return request.user.is_superuser or request.user.groups.filter(name='vendors').exists()    def has_view_permission(self, request, obj=None):        return request.user.is_superuser or request.user.groups.filter(name='vendors').exists()    def has_module_permission(self, request):        return request.user.is_superuser or request.user.groups.filter(name='vendors').exists()